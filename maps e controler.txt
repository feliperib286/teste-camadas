import { Request, Response } from "express";
import { query } from "../database/db";


interface ResultadoQuery {
  latitude: number;
  longitude: number;
  estado: string;
  bioma: string;
  risco_fogo: number;
  data: string;
  dia_sem_chuva?: string;
  precipitacao?: string;
  frp?: string;
  tipo?: string;
}

// üî• Fun√ß√£o para validar intervalo de datas
const diffDias = (inicio: string, fim: string) => {
  const i = new Date(inicio);
  const f = new Date(fim);
  const diff = (f.getTime() - i.getTime()) / (1000 * 3600 * 24);
  return diff;
};

class OcorrenciaController {
  // üî• RISCO DE FOGO
  public async Filtrar_risco_fogo(req: Request, res: Response): Promise<void> {
    try {
      const { estado, bioma, inicio, fim } = req.query;

      if (!inicio || !fim) {
        res.status(400).json({ erro: "Informe o intervalo de datas (in√≠cio e fim)." });
        return;
      }

      if (diffDias(inicio as string, fim as string) > 100) {
        res.status(400).json({ erro: "O intervalo m√°ximo permitido √© de 100 dias." });
        return;
      }

      let baseQuery = `
        SELECT
          ST_Y(r.geometria) AS latitude,
          ST_X(r.geometria) AS longitude,
          e.estado,
          b.bioma,
          CAST(r.risco_fogo AS FLOAT) AS risco_fogo,
          r.data,
          'risco' AS tipo
        FROM Risco r
        JOIN Estados e ON r.estado_id = e.id_estado
        JOIN Bioma b ON r.bioma_id = b.id
        WHERE r.data BETWEEN $1 AND $2
      `;

      const values: any[] = [inicio, fim];

      if (estado) {
        baseQuery += ` AND r.estado_id = $${values.length + 1}`;
        values.push(Number(estado));
      }

      if (bioma) {
        baseQuery += ` AND r.bioma_id = $${values.length + 1}`;
        values.push(Number(bioma));
      }

      baseQuery += ' LIMIT 10000';

      const resultado: ResultadoQuery[] = await query(baseQuery, values);
      res.json(resultado);
    } catch (err: any) {
      res.status(500).json({ erro: "Erro ao buscar risco de fogo", detalhes: err.message });
    }
  }

  // üî• √ÅREA QUEIMADA coloquei o satelite tbm
  public async Filtrar_area_queimada(req: Request, res: Response): Promise<void> {
    try {
      const { estado, bioma, inicio, fim } = req.query;

      if (!inicio || !fim) {
        res.status(400).json({ erro: "Informe o intervalo de datas (in√≠cio e fim)." });
        return;
      }

      if (diffDias(inicio as string, fim as string) > 100) {
        res.status(400).json({ erro: "O intervalo m√°ximo permitido √© de 100 dias." });
        return;
      }

      let baseQuery = `
       SELECT
  ST_Y(a.geom) AS latitude,
  ST_X(a.geom) AS longitude,
  e.estado,
  b.bioma,
  a.risco AS risco_fogo,
  a.data_pas AS data,
  a.frp,
  a.tipo,
  a.satelite
FROM Area_Queimada a
JOIN Estados e ON a.estado_id = e.id_estado
JOIN Bioma b ON a.bioma_id = b.id
WHERE a.data_pas BETWEEN $1 AND $2

      `;

      const values: any[] = [inicio, fim];

      if (estado) {
        baseQuery += ` AND a.estado_id = $${values.length + 1}`;
        values.push(Number(estado));
      }

      if (bioma) {
        baseQuery += ` AND a.bioma_id = $${values.length + 1}`;
        values.push(Number(bioma));
      }

      baseQuery += ' LIMIT 10000';

      const resultado: ResultadoQuery[] = await query(baseQuery, values);
      res.json(resultado);
    } catch (err: any) {
      res.status(500).json({ erro: "Erro ao buscar √°rea queimada", detalhes: err.message });
    }
  }

  // üî• FOCO DE CALOR
  public async Filtrar_foco_calor(req: Request, res: Response): Promise<void> {
    try {
      const { estado, bioma, inicio, fim } = req.query;

      if (!inicio || !fim) {
        res.status(400).json({ erro: "Informe o intervalo de datas (in√≠cio e fim)." });
        return;
      }

      if (diffDias(inicio as string, fim as string) > 100) {
        res.status(400).json({ erro: "O intervalo m√°ximo permitido √© de 100 dias." });
        return;
      }

      let baseQuery = `
        SELECT
          ST_Y(f.geometria) AS latitude,
          ST_X(f.geometria) AS longitude,
          e.estado,
          b.bioma,
          f.risco_fogo AS risco_fogo,
          f.data AS data,
          f.dia_sem_chuva AS dia_sem_chuva,
          f.precipitacao,
          f.frp
        FROM Foco_Calor f
        JOIN Estados e ON f.estado_id = e.id_estado
        JOIN Bioma b ON f.bioma_id = b.id
        WHERE f.data BETWEEN $1 AND $2
      `;

      const values: any[] = [inicio, fim];

      if (estado) {
        baseQuery += ` AND f.estado_id = $${values.length + 1}`;
        values.push(Number(estado));
      }

      if (bioma) {
        baseQuery += ` AND f.bioma_id = $${values.length + 1}`;
        values.push(Number(bioma));
      }

      baseQuery += ' LIMIT 10000';

      const resultado: ResultadoQuery[] = await query(baseQuery, values);
      res.json(resultado);
    } catch (err: any) {
      res.status(500).json({ erro: "Erro ao buscar foco de calor", detalhes: err.message });
    }
  }


  // üìä GR√ÅFICO DE √ÅREA QUEIMADA
  public async GraficoAreaQueimada(req: Request, res: Response): Promise<void> {
    try {
      const { estado, bioma, inicio, fim, local } = req.query;

      const agrupamento = local === 'bioma' ? 'b.bioma' : 'e.estado';

      let queryStr = `
        SELECT 
          ${agrupamento} AS categoria,
          COUNT(*) AS total
        FROM Area_Queimada a
        JOIN Estados e ON a.estado_id = e.id_estado
        JOIN Bioma b ON a.bioma_id = b.id
        WHERE 1=1
      `;

      const values: any[] = [];

      if (estado) {
        queryStr += ` AND a.estado_id = $${values.length + 1}`;
        values.push(Number(estado));
      }

      if (bioma) {
        queryStr += ` AND a.bioma_id = $${values.length + 1}`;
        values.push(Number(bioma));
      }

      if (inicio) {
        queryStr += ` AND a.data_pas >= $${values.length + 1}`;
        values.push(inicio);
      }

      if (fim) {
        queryStr += ` AND a.data_pas <= $${values.length + 1}`;
        values.push(fim);
      }

      queryStr += ` GROUP BY categoria ORDER BY total DESC`;

      const resultado = await query(queryStr, values);
      res.json(resultado);
    } catch (err: any) {
      res.status(500).json({ erro: "Erro ao gerar gr√°fico de √°rea queimada", detalhes: err.message });
    }
  }

  // üìä GR√ÅFICO DE RISCO DE FOGO
  public async GraficoRiscoFogo(req: Request, res: Response): Promise<void> {
    try {
      const { estado, bioma, inicio, fim, local } = req.query;

      const agrupamento = local === 'bioma' ? 'b.bioma' : 'e.estado';

      let queryStr = `
        SELECT 
          ${agrupamento} AS categoria,
          ROUND(AVG(r.risco_fogo), 2) AS total
        FROM Risco r
        JOIN Estados e ON r.estado_id = e.id_estado
        JOIN Bioma b ON r.bioma_id = b.id
        WHERE 1=1
      `;

      const values: any[] = [];

      if (estado) {
        queryStr += ` AND r.estado_id = $${values.length + 1}`;
        values.push(Number(estado));
      }

      if (bioma) {
        queryStr += ` AND r.bioma_id = $${values.length + 1}`;
        values.push(Number(bioma));
      }

      if (inicio) {
        queryStr += ` AND r.data >= $${values.length + 1}`;
        values.push(inicio);
      }

      if (fim) {
        queryStr += ` AND r.data <= $${values.length + 1}`;
        values.push(fim);
      }

      queryStr += ` GROUP BY categoria ORDER BY total DESC`;

      const resultado = await query(queryStr, values);
      res.json(resultado);
    } catch (err: any) {
      res.status(500).json({ erro: "Erro ao gerar gr√°fico de risco de fogo", detalhes: err.message });
    }
  }

  // üìä GR√ÅFICO DE FOCO DE CALOR
  public async GraficoFocoCalor(req: Request, res: Response): Promise<void> {
    try {
      const { estado, bioma, inicio, fim, local } = req.query;

      const agrupamento = local === 'bioma' ? 'b.bioma' : 'e.estado';

      let queryStr = `
        SELECT 
          ${agrupamento} AS categoria,
          ROUND(AVG(f.frp), 1) AS total
        FROM Foco_Calor f
        JOIN Estados e ON f.estado_id = e.id_estado
        JOIN Bioma b ON f.bioma_id = b.id
        WHERE 1=1
      `;

      const values: any[] = [];

      if (estado) {
        queryStr += ` AND f.estado_id = $${values.length + 1}`;
        values.push(Number(estado));
      }

      if (bioma) {
        queryStr += ` AND f.bioma_id = $${values.length + 1}`;
        values.push(Number(bioma));
      }

      if (inicio) {
        queryStr += ` AND f.data >= $${values.length + 1}`;
        values.push(inicio);
      }

      if (fim) {
        queryStr += ` AND f.data <= $${values.length + 1}`;
        values.push(fim);
      }

      queryStr += ` GROUP BY categoria ORDER BY total DESC`;

      const resultado = await query(queryStr, values);
      res.json(resultado);
    } catch (err: any) {
      res.status(500).json({ erro: "Erro ao gerar gr√°fico de foco de calor", detalhes: err.message });
    }
  }

  // üìÖ DATAS DISPON√çVEIS
  public async DatasDisponiveis(req: Request, res: Response): Promise<void> {
    try {
      const { tipo } = req.query;

      // Mapeamento correto das tabelas e colunas
      const config: Record<string, { tabela: string; coluna: string }> = {
        risco: { tabela: "Risco", coluna: "data" },
        foco_calor: { tabela: "Foco_calor", coluna: "data" },
        area_queimada: { tabela: "Area_Queimada", coluna: "data_pas" },
      };

      const tipoConfig = config[String(tipo)];
      if (!tipoConfig) {
        res.status(400).json({ erro: "Tipo inv√°lido. Use risco, foco_calor ou area_queimada." });
        return;
      }

      // Query para datas distintas ordenadas
      const queryDatas = `
  SELECT DISTINCT TO_CHAR(${tipoConfig.coluna}, 'YYYY-MM-DD') AS data 
  FROM ${tipoConfig.tabela} 
  WHERE ${tipoConfig.coluna} IS NOT NULL
  ORDER BY data
`;

      const rows = await query(queryDatas); // ‚Üê agora acessamos o array direto

      if (!rows || rows.length === 0) {
        res.status(404).json({ erro: "Nenhum dado encontrado." });
        return;
      }

      const datas = rows.map((row: any) =>
        new Date(row.data).toISOString().split("T")[0]
      );

      res.json({
        min: datas[0],
        max: datas[datas.length - 1],
        datas_disponiveis: datas,
      });
    } catch (error: any) {
      res.status(500).json({
        erro: "Erro ao buscar datas dispon√≠veis",
        detalhes: error.message,
      });
    }
  }
}



export default new OcorrenciaController();




--------------------------------------------------------


// MapComponent.tsx
import * as L from 'leaflet';
import React, { useEffect, useMemo, useState } from 'react';
import { MapContainer, TileLayer, Marker, Popup, GeoJSON } from 'react-leaflet';
import type { FeatureCollection } from 'geojson';

interface BaseDado {
  latitude: number;
  longitude: number;
  estado: string;
  bioma: string;
  risco_fogo: number;
  data: string;
  frp?: number;
  dia_sem_chuva?: string;
  precipitacao?: number;
  satelite?: string;
  tipo: 'risco' | 'foco' | 'area_queimada';
}

interface Props {
  dados: BaseDado[];
  filtros: {
    bioma: string;
  };
  tipo: '' | 'risco' | 'foco_calor' | 'area_queimada';
}

// Limites do Brasil para impedir que o usu√°rio mova o mapa para fora
const brasilBounds: L.LatLngBoundsExpression = [
  [-34.0, -74.0],
  [5.3, -32.4],
];

// Define a cor baseada no valor do risco de fogo
const getColor = (valor: number): string => {
  if (valor >= 0.8) return '#800026'; //vermelho escuro
  if (valor >= 0.6) return '#BD0026'; //vermelho forte
  if (valor >= 0.4) return '#FC4E2A'; //laranja avermelhado
  if (valor >= 0.2) return '#FD8D3C'; //laranja medio
  if (valor > 0) return '#FED976'; // amarelo
  return '#FFEDA0';
};

// Coordenadas aproximadas dos centros dos estados brasileiros
const centroEstados: Record<string, { lat: number; lon: number }> = {
  'Acre': { lat: -9.02, lon: -70.81 },
  'Alagoas': { lat: -9.57, lon: -36.78 },
  'Amap√°': { lat: 1.41, lon: -51.77 },
  'Amazonas': { lat: -3.47, lon: -65.10 },
  'Bahia': { lat: -12.96, lon: -41.55 },
  'Cear√°': { lat: -5.20, lon: -39.50 },
  'Distrito Federal': { lat: -15.83, lon: -47.86 },
  'Esp√≠rito Santo': { lat: -19.19, lon: -40.34 },
  'Goi√°s': { lat: -15.98, lon: -49.86 },
  'Maranh√£o': { lat: -5.42, lon: -45.44 },
  'Mato Grosso': { lat: -12.64, lon: -55.42 },
  'Mato Grosso do Sul': { lat: -20.51, lon: -54.54 },
  'Minas Gerais': { lat: -18.10, lon: -44.38 },
  'Par√°': { lat: -3.79, lon: -52.48 },
  'Para√≠ba': { lat: -7.12, lon: -36.72 },
  'Paran√°': { lat: -24.89, lon: -51.55 },
  'Pernambuco': { lat: -8.38, lon: -37.86 },
  'Piau√≠': { lat: -7.72, lon: -43.00 },
  'Rio de Janeiro': { lat: -22.84, lon: -43.15 },
  'Rio Grande do Norte': { lat: -5.81, lon: -36.59 },
  'Rio Grande do Sul': { lat: -30.01, lon: -53.43 },
  'Rond√¥nia': { lat: -10.90, lon: -62.80 },
  'Roraima': { lat: 2.05, lon: -61.39 },
  'Santa Catarina': { lat: -27.45, lon: -50.95 },
  'S√£o Paulo': { lat: -23.55, lon: -46.64 },
  'Sergipe': { lat: -10.57, lon: -37.45 },
  'Tocantins': { lat: -10.25, lon: -48.25 }
};

const normalizar = (str: string) =>
  str.normalize('NFD').replace(/\p{Diacritic}/gu, '').toLowerCase();

const MapComponent: React.FC<Props> = ({ dados, filtros, tipo }) => {
  const [geojsonBiomas, setGeojsonBiomas] = useState<FeatureCollection | null>(null);

  // Carrega o arquivo GeoJSON dos biomas
  useEffect(() => {
    fetch('/biomas.geojson')
      .then(res => res.json())
      .then(data => setGeojsonBiomas(data))
      .catch(err => console.error('Erro ao carregar biomas:', err));
  }, []);

  // Mapeia ID num√©rico para nome de biomas
  const biomaIdToNome: Record<number, string> = {
    1: 'Amaz√¥nia', 2: 'Caatinga', 3: 'Cerrado', 4: 'Mata Atl√¢ntica', 5: 'Pampa', 6: 'Pantanal'
  };

  // Filtra o contorno do bioma selecionado para exibir no mapa
  const contornoFiltrado = useMemo(() => {
    if (!geojsonBiomas || !filtros.bioma) return null;
    const nomeBioma = biomaIdToNome[Number(filtros.bioma)];
    if (!nomeBioma) return null;
    const filtrados = geojsonBiomas.features.filter(f => {
      const nome = f.properties?.bioma;
      return nome && normalizar(nome) === normalizar(nomeBioma);
    });
    return { ...geojsonBiomas, features: filtrados };
  }, [geojsonBiomas, filtros.bioma]);

  // Agrupa os dados de risco por estado e calcula a m√©dia
  const dadosRiscoPorEstado = useMemo(() => {
    if (tipo !== 'risco') return [];
    const agrupado = dados.reduce<Record<string, { total: number; count: number }>>((acc, item) => {
      if (item.risco_fogo < 0) return acc;
      if (!acc[item.estado]) acc[item.estado] = { total: 0, count: 0 };
      acc[item.estado].total += item.risco_fogo;
      acc[item.estado].count++;
      return acc;
    }, {});
    return Object.entries(agrupado).map(([estado, { total, count }]) => ({
      estado,
      media: total / count,
      latitude: centroEstados[estado]?.lat ?? -15.78,
      longitude: centroEstados[estado]?.lon ?? -47.92
    }));
  }, [dados, tipo]);

  return (
    <MapContainer center={[-15.78, -47.92]} zoom={4} style={{ height: '100vh', width: '100%' }} maxBounds={brasilBounds} maxBoundsViscosity={1.0}>
      <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution="&copy; OpenStreetMap contributors" />

      {/* Exibe √≠cones de risco de fogo por estado */}
      {tipo === 'risco' && dadosRiscoPorEstado.map((item, idx) => (
        <Marker
          key={idx}
          position={[item.latitude, item.longitude]}
          icon={L.divIcon({
            className: 'custom-icon',
            html: `<div style="background-color: ${getColor(item.media)}; width: 35px; height: 35px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold;">${item.media.toFixed(2)}</div>`
          })}
        >
          <Popup>
            <strong>Estado:</strong> {item.estado}<br />
            <strong>M√©dia Risco de Fogo:</strong> {item.media.toFixed(2)}
          </Popup>
        </Marker>
      ))}

      {/* Marcadores individuais para foco de calor e √°rea queimada */}
      {(tipo === 'foco_calor' || tipo === 'area_queimada') && dados.map((item, idx) => (
        <Marker
          key={idx}
          position={[item.latitude, item.longitude]}
          icon={L.divIcon({
            className: 'custom-icon',
            html: `<div style="background-color: ${getColor(item.risco_fogo)}; width: 20px; height: 20px; border-radius: 50%;"></div>`
          })}
        >
                {/* mudanca de satelite nos pontos, somente o popup */}

         <Popup>
  <strong>Data:</strong> {new Date(item.data).toLocaleDateString()}<br />
  <strong>Estado:</strong> {item.estado}<br />
  <strong>Bioma:</strong> {item.bioma}<br />
  <strong>Risco de Fogo:</strong> {item.risco_fogo}<br />

  {item.frp !== undefined && <><strong>FRP:</strong> {item.frp}<br /></>}

  {item.satelite && <><strong>Sat√©lite:</strong> {item.satelite}<br /></>}

  {item.dia_sem_chuva && (
    <>
      <strong>Dias sem chuva:</strong> {item.dia_sem_chuva}<br />
      <strong>Precipita√ß√£o:</strong> {item.precipitacao}<br />
    </>
  )}
</Popup>

        </Marker>
      ))}

      {/* Exibe o contorno do bioma selecionado */}
      {contornoFiltrado && (
        <GeoJSON
          key={filtros.bioma}
          data={contornoFiltrado}
          style={() => ({
            color: 'black',
            weight: 3,
            fillOpacity: 0
          })}
        />
      )}
    </MapContainer>
  );
};

export default MapComponent;
